class Solution(object):
    # def isPalindrome(self, s):
    #     return s == s[::-1]
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: str
        """
        T = '#'.join('^{}$'.format(s))
        n = len(T)
        P = [0] * n
        C = R = 0
        # max = 0
        # max_pal = []
        # n = len(s)
        # if n <= 1:
        #     return s
        # else:
        #     for index, char in enumerate(s):
        #         for index2, char2 in enumerate(s):
        #             if (self.isPalindrome(s[index:index2 + 1])):
        #                 sub = s[index:index2 + 1]
        #                 curr_len = len(sub)
        #                 if(max < curr_len):
        #                     max = curr_len
        #                     max_pal = sub
        #     return max_pal
        for i in range(1, n - 1):
            mirror = 2 * C - i            
            if i < R:
                P[i] = min(R - i, P[mirror])            
            while T[i + P[i] + 1] == T[i - P[i] - 1]:
                P[i] += 1
            if i + P[i] > R:
                C, R = i, i + P[i]
        max_len, center_index = max((n, i) for i, n in enumerate(P))
        start = (center_index - max_len) // 2
        return s[start:start + max_len]




